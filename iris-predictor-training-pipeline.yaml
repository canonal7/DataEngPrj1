# PIPELINE DEFINITION
# Name: iris-predictor-training-pipeline
# Inputs:
#    data_bucket: str
#    dataset_uri: str
#    model_repo: str
#    model_repo_uri: str
#    project_id: str
components:
  comp-condition-1:
    dag:
      tasks:
        upload-model-to-gcs:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-rf-out_model
            parameters:
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs
    inputDefinitions:
      artifacts:
        pipelinechannel--train-rf-out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--model-comparator-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-condition-2:
    dag:
      tasks:
        upload-model-to-gcs-2:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs-2
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-lr-model
            parameters:
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        pipelinechannel--train-lr-model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--model-comparator-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-condition-3:
    dag:
      tasks:
        upload-model-to-gcs-3:
          cachingOptions:
            enableCache: true
          componentRef:
            name: comp-upload-model-to-gcs-3
          inputs:
            artifacts:
              model:
                componentInputArtifact: pipelinechannel--train-knn-out_model
            parameters:
              model_repo:
                componentInputParameter: pipelinechannel--model_repo
              project_id:
                componentInputParameter: pipelinechannel--project_id
          taskInfo:
            name: upload-model-to-gcs-3
    inputDefinitions:
      artifacts:
        pipelinechannel--train-knn-out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        pipelinechannel--model-comparator-Output:
          parameterType: STRING
        pipelinechannel--model_repo:
          parameterType: STRING
        pipelinechannel--project_id:
          parameterType: STRING
  comp-importer:
    executorLabel: exec-importer
    inputDefinitions:
      parameters:
        uri:
          parameterType: STRING
    outputDefinitions:
      artifacts:
        artifact:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
  comp-model-comparator:
    executorLabel: exec-model-comparator
    inputDefinitions:
      parameters:
        knn_metrics:
          parameterType: STRUCT
        lr_metrics:
          parameterType: STRUCT
        rf_metrics:
          parameterType: STRUCT
    outputDefinitions:
      parameters:
        Output:
          parameterType: STRING
  comp-train-knn:
    executorLabel: exec-train-knn
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-train-lr:
    executorLabel: exec-train-lr
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-train-rf:
    executorLabel: exec-train-rf
    inputDefinitions:
      artifacts:
        features:
          artifactType:
            schemaTitle: system.Dataset
            schemaVersion: 0.0.1
    outputDefinitions:
      artifacts:
        out_model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        metrics:
          parameterType: STRUCT
  comp-upload-model-to-gcs:
    executorLabel: exec-upload-model-to-gcs
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
  comp-upload-model-to-gcs-2:
    executorLabel: exec-upload-model-to-gcs-2
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
  comp-upload-model-to-gcs-3:
    executorLabel: exec-upload-model-to-gcs-3
    inputDefinitions:
      artifacts:
        model:
          artifactType:
            schemaTitle: system.Model
            schemaVersion: 0.0.1
      parameters:
        model_repo:
          parameterType: STRING
        project_id:
          parameterType: STRING
deploymentSpec:
  executors:
    exec-importer:
      importer:
        artifactUri:
          runtimeParameter: uri
        typeSchema:
          schemaTitle: system.Dataset
          schemaVersion: 0.0.1
    exec-model-comparator:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - model_comparator
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"' && \"\
          $0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef model_comparator(lr_metrics: dict, knn_metrics: dict, rf_metrics:\
          \ dict)->str:\n    if lr_metrics.get(\"accuracy\") > knn_metrics.get(\"\
          accuracy\") and lr_metrics.get(\"accuracy\") > rf_metrics.get(\"accuracy\"\
          ):\n        return \"LR\"\n    elif knn_metrics.get(\"accuracy\") > lr_metrics.get(\"\
          accuracy\") and knn_metrics.get(\"accuracy\") > rf_metrics.get(\"accuracy\"\
          ):\n        return \"KNN\"\n    elif rf_metrics.get(\"accuracy\") > lr_metrics.get(\"\
          accuracy\") and rf_metrics.get(\"accuracy\") > knn_metrics.get(\"accuracy\"\
          ):\n        return \"RF\"\n    else:\n        print(\"The metrics are not\
          \ distinct, or there is a tie.\")\n\n"
        image: python:3.10.7-slim
    exec-train-knn:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_knn
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_knn(features: Input[Dataset], out_model:Output[Model])\
          \ -> NamedTuple('outputs', metrics=dict):\n    import pandas as pd\n   \
          \ from sklearn.ensemble import RandomForestClassifier\n    from sklearn\
          \ import metrics\n    from sklearn.model_selection import train_test_split\n\
          \    import logging\n    import sys\n    import pickle \n    from sklearn.preprocessing\
          \ import LabelEncoder\n    from sklearn.neighbors import KNeighborsClassifier\n\
          \n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n   \
          \ data = pd.read_csv(features.path)\n\n    y=data[\"class\"]\n\n    le =\
          \ LabelEncoder()\n    y = le.fit_transform(y)\n\n    x_train, x_test, y_train,\
          \ y_test = train_test_split(data.drop('class',axis=1), \n              \
          \                                      y, test_size=0.30, \n           \
          \                                         random_state=101)\n\n    model_knn\
          \ = KNeighborsClassifier(n_neighbors=3)\n\n    model_knn.fit(x_train, y_train)\n\
          \n    metrics_dict = {\n        \"accuracy\": model_knn.score(x_test, y_test[:,True])\n\
          \    }\n    out_model.metadata[\"framework\"] =\"KNN\"\n    file_name =\
          \ out_model.path + f\".pkl\"\n    with open(file_name, 'wb') as file:  \n\
          \        pickle.dump(model_knn, file)   \n    outputs = NamedTuple('outputs',\
          \ metrics=dict)\n    return outputs(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-train-lr:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_lr
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_lr(features: Input[Dataset], model: Output[Model])-> NamedTuple('outputs',\
          \ metrics=dict):\n    '''train a LogisticRegression with default parameters'''\n\
          \    import pandas as pd\n    from sklearn.linear_model import LogisticRegression\
          \  \n    from sklearn import metrics\n    from sklearn.model_selection import\
          \ train_test_split\n    import logging\n    import sys\n    import pickle\
          \ \n\n    logging.basicConfig(stream=sys.stdout, level=logging.INFO)\n\n\
          \    data = pd.read_csv(features.path)\n    x_train, x_test, y_train, y_test\
          \ = train_test_split(data.drop('class',axis=1), \n                     \
          \                               data['class'], test_size=0.30, \n      \
          \                                              random_state=101)\n    model_lr\
          \ = LogisticRegression()\n    model_lr.fit(x_train, y_train)\n    metrics_dict\
          \ = {\n        \"accuracy\": model_lr.score(x_test, y_test)\n    }\n   \
          \ logging.info(metrics_dict)\n    model.metadata[\"framework\"] = \"LR\"\
          \n    file_name = model.path + f\".pkl\"\n    with open(file_name, 'wb')\
          \ as file:  \n        pickle.dump(model_lr, file)   \n    outputs = NamedTuple('outputs',\
          \ metrics=dict)\n    return outputs(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-train-rf:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - train_rf
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'pandas' 'scikit-learn'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef train_rf(features: Input[Dataset], out_model:Output[Model]) ->\
          \ NamedTuple('outputs', metrics=dict):\n    import pandas as pd\n    from\
          \ sklearn.ensemble import RandomForestClassifier\n    from sklearn import\
          \ metrics\n    from sklearn.model_selection import train_test_split\n  \
          \  import logging\n    import sys\n    import pickle \n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)\n\n    data = pd.read_csv(features.path)\n    x_train,\
          \ x_test, y_train, y_test = train_test_split(data.drop('class',axis=1),\
          \ \n                                                    data['class'], test_size=0.30,\
          \ \n                                                    random_state=101)\n\
          \    model_rf = RandomForestClassifier(n_estimators=100)\n    model_rf.fit(x_train,\
          \ y_train)\n    metrics_dict = {\n        \"accuracy\": model_rf.score(x_test,\
          \ y_test)\n    }\n    out_model.metadata[\"framework\"] =\"RF\"\n    file_name\
          \ = out_model.path + f\".pkl\"\n    with open(file_name, 'wb') as file:\
          \  \n        pickle.dump(model_rf, file)   \n    outputs = NamedTuple('outputs',\
          \ metrics=dict)\n    return outputs(metrics_dict)\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import\
          \ storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # upload the model to GCS\n    client =\
          \ storage.Client(project=project_id)\n    bucket = client.bucket(model_repo)\n\
          \    blob = bucket.blob(model.metadata[\"framework\"] + '_model' + '.pkl')\n\
          \    source_file_name= model.path + '.pkl'\n\n    blob.upload_from_filename(source_file_name)\
          \    \n\n    print(f\"File {source_file_name} uploaded to {model_repo}.\"\
          )\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs-2:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import\
          \ storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # upload the model to GCS\n    client =\
          \ storage.Client(project=project_id)\n    bucket = client.bucket(model_repo)\n\
          \    blob = bucket.blob(model.metadata[\"framework\"] + '_model' + '.pkl')\n\
          \    source_file_name= model.path + '.pkl'\n\n    blob.upload_from_filename(source_file_name)\
          \    \n\n    print(f\"File {source_file_name} uploaded to {model_repo}.\"\
          )\n\n"
        image: python:3.10.7-slim
    exec-upload-model-to-gcs-3:
      container:
        args:
        - --executor_input
        - '{{$}}'
        - --function_to_execute
        - upload_model_to_gcs
        command:
        - sh
        - -c
        - "\nif ! [ -x \"$(command -v pip)\" ]; then\n    python3 -m ensurepip ||\
          \ python3 -m ensurepip --user || apt-get install python3-pip\nfi\n\nPIP_DISABLE_PIP_VERSION_CHECK=1\
          \ python3 -m pip install --quiet --no-warn-script-location 'kfp==2.3.0'\
          \ '--no-deps' 'typing-extensions>=3.7.4,<5; python_version<\"3.9\"'  &&\
          \  python3 -m pip install --quiet --no-warn-script-location 'google-cloud-storage'\
          \ && \"$0\" \"$@\"\n"
        - sh
        - -ec
        - 'program_path=$(mktemp -d)


          printf "%s" "$0" > "$program_path/ephemeral_component.py"

          _KFP_RUNTIME=true python3 -m kfp.dsl.executor_main                         --component_module_path                         "$program_path/ephemeral_component.py"                         "$@"

          '
        - "\nimport kfp\nfrom kfp import dsl\nfrom kfp.dsl import *\nfrom typing import\
          \ *\n\ndef upload_model_to_gcs(project_id: str, model_repo: str, model:\
          \ Input[Model]):\n    '''upload model to gsc'''\n    from google.cloud import\
          \ storage   \n    import logging \n    import sys\n\n    logging.basicConfig(stream=sys.stdout,\
          \ level=logging.INFO)    \n\n    # upload the model to GCS\n    client =\
          \ storage.Client(project=project_id)\n    bucket = client.bucket(model_repo)\n\
          \    blob = bucket.blob(model.metadata[\"framework\"] + '_model' + '.pkl')\n\
          \    source_file_name= model.path + '.pkl'\n\n    blob.upload_from_filename(source_file_name)\
          \    \n\n    print(f\"File {source_file_name} uploaded to {model_repo}.\"\
          )\n\n"
        image: python:3.10.7-slim
pipelineInfo:
  name: iris-predictor-training-pipeline
root:
  dag:
    tasks:
      condition-1:
        componentRef:
          name: comp-condition-1
        dependentTasks:
        - model-comparator
        - train-rf
        inputs:
          artifacts:
            pipelinechannel--train-rf-out_model:
              taskOutputArtifact:
                outputArtifactKey: out_model
                producerTask: train-rf
          parameters:
            pipelinechannel--model-comparator-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: model-comparator
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: condition-1
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--model-comparator-Output']
            == 'RF'
      condition-2:
        componentRef:
          name: comp-condition-2
        dependentTasks:
        - model-comparator
        - train-lr
        inputs:
          artifacts:
            pipelinechannel--train-lr-model:
              taskOutputArtifact:
                outputArtifactKey: model
                producerTask: train-lr
          parameters:
            pipelinechannel--model-comparator-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: model-comparator
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: condition-2
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--model-comparator-Output']
            == 'LR'
      condition-3:
        componentRef:
          name: comp-condition-3
        dependentTasks:
        - model-comparator
        - train-knn
        inputs:
          artifacts:
            pipelinechannel--train-knn-out_model:
              taskOutputArtifact:
                outputArtifactKey: out_model
                producerTask: train-knn
          parameters:
            pipelinechannel--model-comparator-Output:
              taskOutputParameter:
                outputParameterKey: Output
                producerTask: model-comparator
            pipelinechannel--model_repo:
              componentInputParameter: model_repo
            pipelinechannel--project_id:
              componentInputParameter: project_id
        taskInfo:
          name: condition-3
        triggerPolicy:
          condition: inputs.parameter_values['pipelinechannel--model-comparator-Output']
            == 'KNN'
      importer:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-importer
        inputs:
          parameters:
            uri:
              componentInputParameter: dataset_uri
        taskInfo:
          name: importer
      model-comparator:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-model-comparator
        dependentTasks:
        - train-knn
        - train-lr
        - train-rf
        inputs:
          parameters:
            knn_metrics:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: train-knn
            lr_metrics:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: train-lr
            rf_metrics:
              taskOutputParameter:
                outputParameterKey: metrics
                producerTask: train-rf
        taskInfo:
          name: model-comparator
      train-knn:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-knn
        dependentTasks:
        - importer
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: artifact
                producerTask: importer
        taskInfo:
          name: train-knn
      train-lr:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-lr
        dependentTasks:
        - importer
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: artifact
                producerTask: importer
        taskInfo:
          name: train-lr
      train-rf:
        cachingOptions:
          enableCache: true
        componentRef:
          name: comp-train-rf
        dependentTasks:
        - importer
        inputs:
          artifacts:
            features:
              taskOutputArtifact:
                outputArtifactKey: artifact
                producerTask: importer
        taskInfo:
          name: train-rf
  inputDefinitions:
    parameters:
      data_bucket:
        parameterType: STRING
      dataset_uri:
        parameterType: STRING
      model_repo:
        parameterType: STRING
      model_repo_uri:
        parameterType: STRING
      project_id:
        parameterType: STRING
schemaVersion: 2.1.0
sdkVersion: kfp-2.3.0
